import java.io.*;
import java.util.*;

class Main {
    static long[] bit;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        long A = Long.parseLong(st.nextToken());
        long B = Long.parseLong(st.nextToken());
        initBitCount();

        long ans = getBitCount(B) - getBitCount(A-1);

        bw.write(ans + "");
        bw.flush();
        bw.close();
    }

    // bit[i] : 0 부터 i 번째 비트까지 모두 1인 숫자 사이에 있는 1의 개수
    // ex ) bit[2] : 000 ~ 111 (7) 까지의 1의 개수
    public static void initBitCount() {
        bit = new long[55];
        bit[0] = 1;
        for(int i = 1; i < 55; i++) {
            bit[i] = 2 * bit[i-1] + (1L<<i);
        }
    }
    public static long getBitCount(long x) {
        long ans = x & 1;

        for(int i = 54; i >0; i--) { // i = 0 일 경우 인덱스가 음수가 되기 때문에 제외 -> ans = x&1 로 해결
            if((x & (1L << i)) > 0L) {
                ans += bit[i-1] + (x - (1L << i) + 1);
                x -= (1L << i);
            }
        }
        return ans;
    }

}
// 3 12 -> 20
