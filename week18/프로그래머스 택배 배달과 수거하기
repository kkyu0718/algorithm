// 1:00

class Solution {
    long cnt = 0;
    long target = 0;
    public long solution(int cap, int n, int[] deliveries, int[] pickups) {
        long answer = 0;
        
        for(int i = 0; i < n; i++) {
            target += deliveries[i];
            target += pickups[i];
        }
        
        while(true) {
            int maxIndex = search(deliveries, pickups, n);
            // System.out.println(maxIndex);
            if(maxIndex < 0 ) break;

            deliveries = goThrough(deliveries, maxIndex, cap);
            pickups = goThrough(pickups, maxIndex, cap);
            // System.out.println(maxIndex);
            // print(deliveries);
            // print(pickups);
            answer += (maxIndex+1) * 2;
            // if(maxIndex == 0) break;

        }
        
        return answer;
    }
    
    private int search(int[] d, int[] p, int n) {
        int idx = n-1;
        while(idx >= 0 && d[idx] == 0 && p[idx] == 0 ) {
            idx--;
        }
        return idx;
    }
    
    private void print(int[] arr) {
        for(int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] +  " ");
        }
        System.out.println();
    }
    
    private int[] goThrough(int[] arr, int maxIndex, int cap) {
        while(cap > 0 && maxIndex >= 0) {
            while(maxIndex >= 0 && arr[maxIndex] > 0 && cap > 0) {
                arr[maxIndex] -= 1;
                cap -= 1;
                cnt += 1;
            }
            maxIndex -= 1;
        }
        return arr;
    }
}
