
import java.io.*;
import java.util.*;
public class Main {


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        int m = Integer.parseInt(st.nextToken());

        int[][] graph = new int[n+1][n+1];
        int[][] pre = new int[n+1][n+1];

        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= n; j++) {
                graph[i][j] = 100000;
            }
        }

        for(int i = 1; i <= n; i++) {
            graph[i][i] = 0;
        }

        for(int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());

            if(graph[a][b] > c) {
                graph[a][b] = c;
                pre[a][b] = a;
            }
        }

        for(int k = 1; k <= n; k++) {
            for(int i = 1; i <= n; i++) {
                for(int j = 1; j <= n; j++) {
                    if(graph[i][j] > graph[i][k] + graph[k][j]) {
                        graph[i][j] = graph[i][k] + graph[k][j];
                        pre[i][j] = pre[k][j];
//                        pre[k][j] = k;
                    }
                }
            }
        }
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= n; j++) {
                System.out.print(graph[i][j] + " ");
            }
            System.out.println();
        }
//        for(int i = 1; i <= n; i++) {
//            for(int j = 1; j <= n; j++) {
//                System.out.print(pre[i][j] + " ");
//            }
//            System.out.println();
//        }
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= n; j++) {
                Stack<Integer> stk = new Stack<>();
                int a = pre[i][j];
                if(a == 0) {
                    System.out.println("0");
                } else{
                    stk.add(j);
                    while(a != i) {
                        stk.add(a);
                        a = pre[i][a];
                    }
                    stk.add(i);
                    int num = stk.size();
                    StringBuilder sb = new StringBuilder();
                    while(!stk.isEmpty()) {
                        sb.append(stk.pop() + " ");
                    }
                    System.out.println(num + " " +sb.toString());
                }

            }
        }
    }

}
