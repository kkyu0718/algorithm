
import java.io.*;
import java.util.*;
public class Main {
    static class Node {
        private int v;
        private int weight;

        Node(int v, int weight) {
            this.v = v;
            this.weight = weight;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int V = Integer.parseInt(st.nextToken());
        int E = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int start = Integer.parseInt(st.nextToken());

        // map 초기화
        ArrayList<ArrayList<Node>> map = new ArrayList<ArrayList<Node>>();
        for(int i = 0; i <= V; i++) {
            map.add(new ArrayList<Node>());
        }

        for(int i = 0; i < E; i++) {
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());

            map.get(u).add(new Node(v, w));
        }

        // 거리 초기화
        int[] dist = new int[V+1];
        for(int i = 0; i <= V; i++) {
            dist[i] = Integer.MAX_VALUE;
        }

        PriorityQueue<Node> q = new PriorityQueue<>((o1, o2) -> Integer.compare(o1.weight, o2.weight));
        q.offer(new Node(start, 0));
        dist[start] = 0;

        while(!q.isEmpty()) {
            Node curNode = q.poll();

            // 최소값이 이미 저장되어있는 값보다 크다면 continue, 미리 확정되어있던 값이기 때문
            if(dist[curNode.v] < curNode.weight) continue;

            for(int i = 0; i < map.get(curNode.v).size(); i++ ) {
                Node nxtNode = map.get(curNode.v).get(i);

                if(dist[nxtNode.v] > dist[curNode.v] + nxtNode.weight) {
                    dist[nxtNode.v] = dist[curNode.v] + nxtNode.weight;
                    // 갱신되었다면 큐에 다시 넣어준다.
                    q.offer(new Node(nxtNode.v, dist[nxtNode.v]));
                }
            }
        }

        for(int i = 1; i < dist.length; i++) {
            String d = dist[i] == Integer.MAX_VALUE ? "INF" : Integer.toString(dist[i]);
            bw.write(d + "\n");
        }
        bw.flush();
    }






}
