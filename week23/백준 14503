import java.io.*;
import java.util.*;

public class Main {
	// 8:20
	static int[][] visit;
	static int[][] map;
	
	static int n, m;
	static int answer = 0;
	
	// 북 동 남 서
	static int[] dr = { -1, 0, 1, 0};
	static int[] dc = {0, 1, 0, -1};
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		visit = new int[n][m];
		map = new int[n][m];
		
		st = new StringTokenizer(br.readLine());
		int r = Integer.parseInt(st.nextToken());
		int c = Integer.parseInt(st.nextToken());
		int dir = Integer.parseInt(st.nextToken());
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		
		dfs(r, c, dir);
		bw.write(answer+"");
		bw.flush();
	}
	
	private static void dfs(int r, int c, int dir) {
		
		if(map[r][c] == 0 && visit[r][c] == 0) {
			visit[r][c] = 1;
//			print(visit);
			
			answer++;
		}
		boolean flag  = false;
		for(int i = 1; i <= 4; i++ ) {
			int newDir = (dir+4-i) % 4;
			int nr = r + dr[newDir];
			int nc = c + dc[newDir];
			
			if(OOB(nr, nc) == false && visit[nr][nc] == 0 && map[nr][nc] == 0 ) {
//				System.out.println("dir 1 : nr " + nr + " nc " + nc + "dir" + newDir);
				dfs(nr, nc, newDir);
				flag = true;
				break;
			}
		}
		
		if(flag == true) return;
		
		int back = (dir + 2) % 4;
		int nr = r + dr[back];
		int nc = c + dc[back];
		
		if(OOB(nr, nc) == false && map[nr][nc] == 0) {
//			System.out.println("dir 2 : nr " + nr + " nc " + nc + " dir" + dir);
			dfs(nr, nc, dir);
		} 
		return;
		
	}
	
	private static boolean OOB(int r, int c) {
		return r < 0 || r >= n || c < 0 || c >= m;
	}
	
	private static void print(int[][] map) {
		for(int i = 0; i < map.length; i++) {
			for(int j = 0; j < map[0].length; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println("---------");
	}

}

//4 4
//1 1 0
//0 0 0 0
//0 0 0 0
//0 0 0 0
//0 0 0 0
