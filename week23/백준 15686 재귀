//1:30
package algorithm;
import java.io.*;
import java.util.*;

class Main {
	
	static int n,m;
	static int[][] map;
	static List<Node> home = new ArrayList<>();
	static List<Node> chicken = new ArrayList<>();
	static int[] visit;
	static int answer = Integer.MAX_VALUE;
	
	static public void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][n];
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < n; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] == 1) {
					home.add(new Node(i, j));
				}
				else if (map[i][j] == 2) {
					chicken.add(new Node(i, j));
				}
			}
		}
		
		visit = new int[15];
		dfs(0, 0);		
		bw.write(answer+"");
		bw.flush();
	}
	
	private static void dfs(int idx, int cnt) {
		if(cnt == m) {
//			print(visit);
			int result = 0;
			for(int i = 0; i < home.size(); i++) {
				int d = Integer.MAX_VALUE;
				Node h = home.get(i);
				for(int j = 0; j < visit.length; j++) {
					if(visit[j] == 1) {
						Node c = chicken.get(j);
						d = Math.min(d, Math.abs(h.r - c.r) + Math.abs(h.c - c.c));
					}
				}
				result += d;
			}
//			for(int i = 0; i < visit.length; i++) {
//				if(visit[i] == 1) {
//					Node c = chicken.get(i);
//					for(int j = 0; j < home.size(); j++) {
//						Node h = home.get(j);
//						result += Math.abs(h.r - c.r) + Math.abs(h.c - c.c);
//					}
//				}
//			}
			answer = Math.min(answer, result);
			return;
		}
		
		if(idx == chicken.size()) {
			return;
		}
		
		
		visit[idx] = 1;
		dfs(idx + 1, cnt+1);
			
		visit[idx] = 0;
		dfs(idx + 1, cnt);
		
	}
		
	static void print(int[] visit) {
		for(int i = 0; i < visit.length; i++) {
			if(visit[i] == 1) {
				System.out.print(i + " ");
			}
		}
		System.out.println();
	}
	
	static class Node {
		private int r, c;
		
		Node(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}
}
