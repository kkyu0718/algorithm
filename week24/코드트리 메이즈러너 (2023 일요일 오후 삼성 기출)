import java.io.*;
import java.util.*;

public class Main {
    static int[][] map;
    static Node[] ppl;
    static int cnt =0 ;
    static int time =1 ;
    static int n, m, k, endr, endc, minr, minc, minlen;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    static int moveDis = 0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw= new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());
        map = new int[n][n];
        ppl = new Node[m];

        for(int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < n; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for(int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int r = Integer.parseInt(st.nextToken())-1;
            int c = Integer.parseInt(st.nextToken())-1;
            ppl[i] = new Node(r, c);
        }

        st = new StringTokenizer(br.readLine());
        endr = Integer.parseInt(st.nextToken())-1;
        endc = Integer.parseInt(st.nextToken())-1;

        while(time <= k) {
            
            // System.out.println("time : " + time);
            move();
            // printNodeArr(ppl);
            if(cnt == m) break;
            findMinRec();
            // System.out.println(minlen + " " + minr + " " + minc);
            // break;
            rotateMap();
            rotatePpl();
            rotateEnd();
            
            // System.out.println("rotate ressults");

            // printMap(map);
            // printNodeArr(ppl);
            // System.out.println("end " + endr +  " " + endc);
            time++;
        }
        System.out.println(moveDis);
        System.out.println((endr+1) + " " + (endc+1));

    }

    static private void printMap(int[][] map) {
        System.out.println("printing map");
        for(int i = 0; i < map.length; i++) {
            for(int j = 0; j < map[0].length; j++) {
                System.out.print(map[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    static private void printNodeArr(Node[] arr) {
        for(int i = 0; i < arr.length; i++) {
            System.out.println(i + " ( " + arr[i].r + " , " + arr[i].c + " )");
        }
    }

    static private void findMinRec() {
        minlen = Integer.MAX_VALUE;
        int templen = Integer.MAX_VALUE;
        int tempr = -1;
        int tempc = -1;

        for(int i = 0; i < m; i++) {
            int r = ppl[i].r;
            int c = ppl[i].c;

            if(r == -1 && c == -1) continue;

            int width = Math.abs(c - endc);
            int height = Math.abs(r-endr);

            if(width >= height) {
                templen = Math.abs(endc - c);
                tempr = Math.max(endr, r) - templen >= 0 ? Math.max(endr, r) - templen : 0;
                tempc = Math.min(endc, c);
            } else {
                templen = Math.abs(endr - r);
                tempr = Math.min(endr, r);
                tempc = Math.max(endc, c) - templen >= 0 ? Math.max(endc, c) - templen : 0;
            }

            if(templen < minlen ) {
                minlen = templen;
                minr = tempr;
                minc = tempc;
            } else if (templen == minlen) {
                if(tempr == minr) {
                    if(tempc < minc) {
                        minr = tempr;
                        minc = tempc;
                    }
                }
                else if(tempr < minr) {
                    minr = tempr;
                    minc = tempc;
                }
            }
        }
    }

    static private void rotateEnd() {
        int temp = endr;
        if(endr >= minr && endr <= minr + minlen && endc >= minc && endc <= minc + minlen) {
            int tempr = endr - minr;
            int tempc = endc - minc;
            int rtempr = tempc;
            int rtempc = minlen - tempr;
            endr = rtempr+minr;
            endc = rtempc+minc;
        }
        
    }

    static private void rotatePpl() {
        for(int i = 0; i < m; i++) {
            Node n = ppl[i];
            int r = n.r;
            int c = n.c;

            if(r == -1 && c == -1) continue;
            if(r >= minr && r <= minr + minlen && c >= minc && c <= minc + minlen) {
                int tempr = r - minr;
                int tempc = c - minc;
                int rtempr = tempc;
                int rtempc = minlen - tempr;
                ppl[i] = new Node(rtempr+ minr, rtempc+minc);
            }
            
        }
    }

    static private void rotateMap() {
        int[][] tempmap = new int[minlen+1][minlen+1];
        int[][] tempRotatedMap = new int[minlen+1][minlen+1];

        for(int i = minr; i <= minr + minlen; i++) {
            for(int j = minc; j <= minc+minlen; j++) {
                tempmap[i-minr][j-minc] = map[i][j];
            }
        }

        for(int i = 0; i <= minlen; i++) {
            for(int j = 0; j <= minlen; j++) {
                // tempRotatedMap[i][j] = tempmap[j][minlen -i];
                tempRotatedMap[j][minlen - i] = tempmap[i][j];
            }
        }

        for(int i = minr; i <= minr + minlen; i++) {
            for(int j = minc; j <= minc+minlen; j++) {
                map[i][j] = tempRotatedMap[i-minr][j-minc];
                if(map[i][j] > 0) map[i][j] -= 1;
            }
        }
    }

    static private void move() {
        for(int i = 0; i < m; i++) {
            Node p = ppl[i];
            int r = p.r;
            int c = p.c;

            if(r == -1 && c == -1) continue;

            for(int d = 0; d < 4; d++) {
                int nr = r + dr[d];
                int nc = c + dc[d];

                if(OOB(nr, nc) || map[nr][nc] > 0) continue;

                if(calculateDist(endr, endc, r, c) - calculateDist(endr, endc, nr, nc) == 1) {
                    if(endr == nr && endc == nc) {
                        cnt++;
                        ppl[i] = new Node(-1, -1);
                    }

                    else {
                        ppl[i] = new Node(nr, nc);
                    }
                    moveDis++;
                    break;
                }
                
            }
        }
    }

    static private int calculateDist(int r1, int c1, int r2, int c2) {
        return Math.abs(r1 - r2) + Math.abs(c1 - c2);
    }

    static private boolean OOB(int r, int c) {
        return r < 0 || r >= n || c < 0 || c >= n;
    }

    static class Node {
        private int r, c;

        Node(int r, int c) {
            this.r = r;
            this.c = c;
        }
    }
}
