import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        int[][] dp = new int[n+1][k+1];

        // 20 = 0 + 20 = 1 + 19 = ... = 20 + 0
        // 6 = 6 + 0 + 0 + 0 = 5 + 1 + 0 + 0 = 4 + 2 + 0 + 0
        // dp[i][j] : j개로 합 i를 만들 수 있는 경우의 수
        // dp[i][j] = dp[0][j-1] + dp[1][j-1] + ... + dp[i][j-1]
        // dp[6][1] = 1 , j == 1 이면 1
        for(int i = 0; i <= n; i++) {
            dp[i][1] = 1;
        }
        for(int j = 1; j <= k; j++) {
            dp[0][j] = 1;
        }

        // dp[20][2] = dp[0][1] + dp[1][1]
        // dp[6][4] = dp[0][3] + dp[1][3] + dp[
        // dp[1][3]

        for(int i = 1; i <= n; i++) {
            for(int j = 2; j <= k; j++) {
                for(int l = 0; l <= i; l++) {
                    dp[i][j] = (dp[i][j] + dp[l][j-1]) % 1000000000;
                }
            }
        }

//        for(int i = 0; i <=n; i++) {
//            for(int j = 0; j <= k; j++) {
//                System.out.print(dp[i][j] + " ");
//            }
//            System.out.println();
//        }

        System.out.println(dp[n][k] % 1000000000);
    }

}
