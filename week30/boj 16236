import java.io.*;
import java.util.*;

public class Main {
    static int sr, sc, nextr, nextc, size, cnt, answer, N;
    static int[] dr = {-1 , 0, 0, 1};
    static int[] dc = {0, -1, 1, 0};
    static int[][] map;

    public static void main(String[] args) throws IOException {
        // 4:14
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        // 크면 못지나감
        // 같으면 지나감
        // 작으면 지나가면서 먹는다 (아기상어 크기 증가)
        // 처음 아기상어 크기 2
        // 1 2 1 2 1 2 1 4
        // 먹을 수있는 물고기가 1마리라면
        // 2마리 이상이라면 거리가 가장 가까운거 - 거리가 같다면 가장 위 왼쪽
        N = Integer.parseInt(st.nextToken());
        map = new int[N][N];

        for(int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                if(map[i][j] == 9) {
                    sr = i;
                    sc = j;
                }
            }
        }

        answer = 0;
        size = 2;
        cnt = 0;

        map[sr][sc] = 0;

        while(true) {
//            print(map);
            nextr = -1;
            nextc = -1;
            bfs(sr, sc);
//            map[sr][sc] = 0;
            if(nextr == -1 && nextc == -1) break;
            sr = nextr;
            sc = nextc;



//            if(answer >= 20) break;
        }

        bw.write(answer+"");
        bw.flush();
    }

    public static void bfs(int sr, int sc) {
        // 거리 계산 - 크기 크면 못지나감
        // 먹으면 크기 cnt 증가
        // 먹을거 없으면?
        // Queue 에 없으면 거리 +1 탐색, 있으면 stop
        PriorityQueue<Node> q = new PriorityQueue<>();
        int[][] visit = new int[N][N];

        q.offer(new Node(sr, sc, 0));
        visit[sr][sc] = 1;

        while(!q.isEmpty()) {
            Node poll = q.poll();
//            System.out.println("poll = " + poll.toString());
            int r = poll.i;
            int c = poll.j;
            int dis = poll.dis;

            if(map[r][c] != 0 && map[r][c] < size) {
//                System.out.println("found !! r = " + r + " c = " + c + " dis= " + dis);
                cnt++;
                if(cnt == size) {
                    size++;
                    cnt = 0;

//                    System.out.println("size = " + size);
                }

                map[r][c] = 0;
                nextr = r;
                nextc = c;
                answer += dis;
//                System.out.println("answer = " + answer);
                break;
            }

            for(int d = 0; d < 4; d++) {
                int nr = r + dr[d];
                int nc = c + dc[d];
                int distance = dis+1;

                if(OOB(nr, nc) || visit[nr][nc] == 1 || map[nr][nc] > size ) continue;
                visit[nr][nc] = 1;
//                if(map[nr][nc] != 0 && map[nr][nc] < size) {
//                    System.out.println("found !! nr = " + nr + " nc = " + nc + " dis= " + distance);
//                    cnt++;
//                    if(cnt == size) {
//                        size++;
//                        cnt = 0;
//
//                        System.out.println("size = " + size);
//                    }
//
//                    map[nr][nc] = 0;
//                    nextr = nr;
//                    nextc = nc;
//                    answer += distance;
//                    System.out.println("answer = " + answer);
//                    break;
//                }

                q.offer(new Node(nr, nc, distance));
//                System.out.println("offer : nr  = " + nr + " nc = " + nc + " distance= " + distance);
            }

            if(nextr != -1 && nextc != -1) {
//                System.out.println("nextr = " + nextr + " nextc = "+ nextc);
                break;
            }
        }

    }

    public static boolean OOB(int r, int c) {
        return r < 0 || r >= N || c < 0 || c >= N;
    }

    public static class Node implements Comparable<Node>{
        private int i, j, dis;

        Node(int i, int j, int dis) {
            this.i = i;
            this.j = j;
            this.dis = dis;
        }

        @Override
        public int compareTo(Node o) {
            if(this.dis == o.dis) {
                if(this.i == o.i) return this.j - o.j;
                return this.i - o.i;
            }
            return this.dis - o.dis;
        }

        @Override
        public String toString() {
            return "Node{" +
                    "i=" + i +
                    ", j=" + j +
                    ", dis=" + dis +
                    '}';
        }
    }


    static void print(int[][] map) {
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                System.out.print(String.format("%3d", map[i][j]));
            }
            System.out.println();
        }
    }
}
