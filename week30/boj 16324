import java.io.*;
import java.util.*;

public class Main {
    static int[][] map;
    static int[][] visit;
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int N, L, R;
    static boolean flag;

    public static void main(String[] args) throws IOException {
        // 5:11

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());

        map = new int[N][N];

        for(int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int turn = 0;
        // visit, bfs
        while(true) {
            // bfs

            visit = new int[N][N];
            int cluster = 1;
            flag = false;
            for(int i = 0; i < N; i++) {
                for(int j = 0; j < N; j++) {
                    if(visit[i][j] != 0) continue;

                    bfs(i, j, cluster);
                    cluster++;
                }
            }


//
//            print(map);
//            print(visit);
//            System.out.println(flag);
//            break;

            if(flag == false) {
                break;
            };
            turn++;
        }
        System.out.println(turn);
    }

    public static void bfs(int i, int j, int cluster) {
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(i, j));
        visit[i][j] = cluster;
        int sum = 0;
        int cnt = 0;

        while(!q.isEmpty()) {
            Node poll = q.poll();
            int r = poll.i;
            int c = poll.j;
            sum += map[r][c];
            cnt++;

            for(int d = 0; d < 4; d++) {
                int nr = dr[d] + r;
                int nc = dc[d] + c;

                if(OOB(nr, nc) || visit[nr][nc] != 0) continue;
//                System.out.println(r + " " + c + " " + map[r][c]);
//                System.out.println(nr + " " + nc + " " + map[nr][nc]);
//                System.out.println((Math.abs(map[nr][nc] - map[r][c])));
//                System.out.println(r);

                if((Math.abs(map[nr][nc] - map[r][c]) >= L) && (Math.abs(map[nr][nc] - map[r][c]) <= R)) {
                    q.offer(new Node(nr, nc));
//                    System.out.println("offer " + nr + " " + nc);
                    visit[nr][nc] = cluster;
                }
            }
        }

        int result = sum/cnt;

        for(int k = 0; k < N; k++) {
            for(int l = 0; l < N; l++) {
                if(visit[k][l] == cluster) {
                    map[k][l] = result;
                }
            }
        }

        if(cnt >= 2) flag = true;
    }

    public static boolean OOB(int i, int j) {
        return i >=N || i < 0 || j >= N || j < 0;
    }

    public static void print(int[][] m) {
        for(int i = 0; i < m.length; i++) {
            for(int j = 0; j < m[0].length; j++) {
                System.out.print(String.format("%3d", m[i][j]));
            }
            System.out.println();
        }
    }
    public static class Node {
        private int i;
        private int j;

        Node(int i, int j) {
            this.i = i;
            this.j = j;
        }
    }
}
