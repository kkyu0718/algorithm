import sys
from collections import deque

sys.setrecursionlimit(10000)
# up down right left
dx = [0, 0, 1, -1]
dy = [1, -1, 0, 0]

def dfs(x, y, adjlist):
    if x < 0 or x>= M or y < 0 or y >= N :
        return
    if adjlist[x][y] == 0 :
        return
    adjlist[x][y] = 0
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        dfs(nx, ny, adjlist)

def bfs(start_x, start_y, adjlist):
    queue = deque([(start_x,start_y)])
    while queue :
        x, y = queue.popleft()
        for i in range(4) :
            nx = x + dx[i]
            ny = y + dy[i]
            if nx < 0 or nx >= M or ny < 0 or ny >= N :
                continue
            if adjlist[nx][ny] == 0 :
                continue

            adjlist[nx][ny]= 0
            queue.append((nx,ny))



iternum = int(sys.stdin.readline().rstrip())
for i in range(iternum):
    M, N, K = map(int, sys.stdin.readline().split())
    adjlist = [[0] * N for _ in range(M)]
    for i in range(K):
        x, y = map(int, sys.stdin.readline().split())
        adjlist[x][y] = 1

    # dfs solution
    count = 0
    for i in range(M):
        for j in range(N):
            if adjlist[i][j] == 1:
                dfs(i,j,adjlist)
                count += 1
    print(count)

    # bfs solution
    count = 0
    for i in range(M):
        for j in range(N):
            if adjlist[i][j] == 1:
                bfs(i,j,adjlist)
                count += 1
    print(count)
