#############################
# dfs
import sys
from collections import deque
input = sys.stdin.readline()
N = int(input())

graph = []
result = []
count = 0

for _ in range(N):
    graph.append(list(map(int, input().rstrip())))

# 한 점을 기준으로 한칸씩 이동할 좌표 설정
dx = [0,0,1,-1]
dy = [1,-1,0,0]

def dfs(x,y):
    global count

    if x<0 or x>= N or y<0 or y>=N:
        return
    if graph[x][y] ==1 :
        count += 1
        graph[x][y]=0
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            dfs(nx, ny)

for i in range(N):
    for j in range(N):
        if graph[i][j] == 1:
            dfs(i,j)
            result.append(count)
            count = 0

result.sort()

print(len(result))
for k in result:
    print(k)

########################################
# bfs
import sys
from collections import deque

input = sys.stdin.readline()
N = int(input())

graph = []
result = []

for _ in range(N):
    graph.append(list(map(int, input().rstrip())))

dx = [0,0,1,-1]
dy = [1, -1, 0, 0]

def bfs(graph,a,b):
    queue = deque()
    queue.append([a,b])
    graph[a][b] = 0
    count = 1
    
    while queue :
        x, y = queue.popleft()
        graph[x][y] = 0
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            
            if nx<0 or nx >= len(graph) or ny <0 or ny >= len(graph):
                continue
            if graph[nx][ny] == 1 :
                graph[nx][ny] = 0
                queue.append([nx, ny])
                count += 1
    
    return count

for i in range(N):
    for j in range(N):
        if graph[i][j] ==1 :
            count = bfs(graph, i, j)
            result.append(count)

result.sort()

print(len(result))
for k in result :
    print(k)
    
